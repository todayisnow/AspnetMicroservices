version: '3.4'

services:
  catalogdb:
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db 
    networks:
      identityserverui: null


  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
    networks:
      identityserverui: null

  discountdb:
    container_name: discountdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=DiscountDb
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data/ 
    networks:
      identityserverui: null
  
  sqlServer:
    container_name: sqlServer
    environment:
        SA_PASSWORD: '${DB_PASSWORD:-Password_123}'
        ACCEPT_EULA: "Y"
    restart: always
    ports:
        - "5555:1433"
    volumes:
      - 'dbdata:/var/opt/mssql'
    networks:
      identityserverui: null

  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
        - "5672:5672"
        - "15672:15672"
    networks:
      identityserverui: null

  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@aspnetrun.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/root/.pgadmin 
    networks:
      identityserverui: null

  portainer:
    container_name: portainer
    restart: always
    ports:
        - "9000:9000"
        - "8080:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      identityserverui: null

  #mongoclient:
  #  image: mongoclient/mongoclient:latest
  #  container_name: mongoclient
  #  hostname: mongoclient
  #  depends_on:
  #    - mongodb
  #  ports:
  #    - 3000:3000

  ############### IDENTITY SERVER ################       
  
  nginx-proxy:
   
     container_name: nginx-proxy
     ports:
      - '80:80'
      - '443:443'
     
      
     volumes:
      #- './shared/nginx/reverse_proxy.conf:/etc/nginx/conf.d/default.conf'
      - '/var/run/docker.sock:/tmp/docker.sock:ro'
      - './shared/nginx/vhost.d:/etc/nginx/vhost.d'
      - './shared/nginx/certs:/etc/nginx/certs:ro'
     networks:
      proxy: null
      identityserverui:
        aliases:
          - sts.skoruba.local
          - admin.skoruba.local
          - admin-api.skoruba.local
          - web.skoruba.local
          - ocelot.skoruba.local
          - catalog.skoruba.local
          - order.skoruba.local
          - basket.skoruba.local
          - discount.skoruba.local
          - discountgrpc.skoruba.local
          - aggregator.skoruba.local
     restart: always

  identityserver.admin:
    
    container_name: identityserveradmin
    environment:
      - VIRTUAL_HOST=admin.skoruba.local
      #- VIRTUAL_PROTO=https
      #- VIRTUAL_PORT=443
      - 'ConnectionStrings__ConfigurationDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__PersistedGrantDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__IdentityDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__AdminLogDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__AdminAuditLogDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__DataProtectionDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'AdminConfiguration__IdentityAdminBaseUrl=https://admin.skoruba.local'
      - 'AdminConfiguration__IdentityAdminRedirectUri=https://admin.skoruba.local/signin-oidc'
      - 'AdminConfiguration__IdentityServerBaseUrl=https://sts.skoruba.local'
      - AdminConfiguration__RequireHttpsMetadata=false
      - 'IdentityServerData__Clients__0__ClientUri=https://admin.skoruba.local'
      - 'IdentityServerData__Clients__0__RedirectUris__0=https://admin.skoruba.local/signin-oidc'
      - 'IdentityServerData__Clients__0__FrontChannelLogoutUri=https://admin.skoruba.local/signin-oidc'
      - 'IdentityServerData__Clients__0__PostLogoutRedirectUris__0=https://admin.skoruba.local/signout-callback-oidc'
      - 'IdentityServerData__Clients__0__AllowedCorsOrigins__0=https://admin.skoruba.local'
      - 'IdentityServerData__Clients__1__RedirectUris__0=https://admin-api.skoruba.local/swagger/oauth2-redirect.html'
      - 'Serilog__WriteTo__1__Args__connectionString=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - DockerConfiguration__UpdateCaCertificate=true
      - ASPNETCORE_ENVIRONMENT=Development
    command: dotnet Skoruba.IdentityServer4.Admin.dll /seed
    depends_on:
      - sqlServer
      - identityserver.sts.identity
    volumes:
      - './shared/serilog.json:/app/serilog.json'
      - './shared/identitydata.json:/app/identitydata.json'
      - './shared/identityserverdata.json:/app/identityserverdata.json'
      - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
      identityserverui: null

  identityserver.admin.api:
   

    container_name: identityserveradminapi
    environment:
      - VIRTUAL_HOST=admin-api.skoruba.local
      #- VIRTUAL_PROTO=https
      #- VIRTUAL_PORT=443
      - AdminApiConfiguration__RequireHttpsMetadata=false
      - 'AdminApiConfiguration__ApiBaseUrl=https://admin-api.skoruba.local'
      - 'AdminApiConfiguration__IdentityServerBaseUrl=https://sts.skoruba.local'
      - 'ConnectionStrings__ConfigurationDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__PersistedGrantDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__IdentityDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__AdminLogDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__AdminAuditLogDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__DataProtectionDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - DockerConfiguration__UpdateCaCertificate=true
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - './shared/serilog.json:/app/serilog.json'
      - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
      identityserverui: null


  identityserver.sts.identity:

    container_name: identityserverstsidentity
    environment:
      - VIRTUAL_HOST=sts.skoruba.local
      #- VIRTUAL_PROTO=https
      #- VIRTUAL_PORT=443      
      - 'ConnectionStrings__ConfigurationDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__PersistedGrantDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__IdentityDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'ConnectionStrings__DataProtectionDbConnection=Server=sqlServer;Database=IdentityServer4Admin;User Id=sa;Password=${DB_PASSWORD:-Password_123};MultipleActiveResultSets=true'
      - 'AdminConfiguration__IdentityAdminBaseUrl=https://admin.skoruba.local'
      - 'IdentityServerOptions__IssuerUri=https://sts.skoruba.local'
      - IdentityServerOptions__Events__RaiseErrorEvents=true
      - IdentityServerOptions__Events__RaiseInformationEvents=true
      - IdentityServerOptions__Events__RaiseFailureEvents=true
      - IdentityServerOptions__Events__RaiseSuccessEvents=true
      - DockerConfiguration__UpdateCaCertificate=true
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - sqlServer
    volumes:
      - './shared/serilog.json:/app/serilog.json'
      - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
      identityserverui:
        aliases:
          - sts.skoruba.local




#################################################################

  catalog.api:
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings:ConnectionString=mongodb://catalogdb:27017"
      - "IdentityServer:Uri=https://sts.skoruba.local"
      - DockerConfiguration__UpdateCaCertificate=true
      - VIRTUAL_HOST=catalog.skoruba.local
    depends_on:
      - catalogdb
      - identityserver.sts.identity
    volumes:
        - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
      identityserverui: null

  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "CacheSettings:ConnectionString=basketdb:6379"
      
      - "GrpcSettings:DiscountUrl=https://discountgrpc.skoruba.local"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
      - "IdentityServer:Uri=https://sts.skoruba.local"
      - DockerConfiguration__UpdateCaCertificate=true
      - VIRTUAL_HOST=basket.skoruba.local
     
    depends_on:
      - basketdb
      - rabbitmq
      - identityserver.sts.identity
    volumes:
     - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
       identityserverui: null


  discount.api:
    container_name: discount.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DockerConfiguration__UpdateCaCertificate=true
      - VIRTUAL_HOST=discount.skoruba.local
      - "DatabaseSettings:ConnectionString=Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=admin1234;"
    depends_on:
      - discountdb

    volumes:
     - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
       identityserverui: null


  discount.grpc:
    container_name: discount.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DockerConfiguration__UpdateCaCertificate=true
      - VIRTUAL_HOST=discountgrpc.skoruba.local      
      - "DatabaseSettings:ConnectionString=Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=admin1234;"
    depends_on:
      - discountdb
      
    volumes:
     - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
       identityserverui: null

  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "ConnectionStrings:OrderingConnectionString=Server=sqlServer;Database=orderdb;User Id=sa;Password=${DB_PASSWORD:-Password_123}"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
      - "IdentityServer:Uri=https://sts.skoruba.local"
      - DockerConfiguration__UpdateCaCertificate=true
      - VIRTUAL_HOST=order.skoruba.local
    depends_on:
      - sqlServer
      - rabbitmq
      - identityserver.sts.identity

    volumes:
     - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
       identityserverui: null



  ocelotapigw:
    container_name: ocelotapigw
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "IdentityServer:Uri=https://sts.skoruba.local"
      - DockerConfiguration__UpdateCaCertificate=true
      - VIRTUAL_HOST=ocelot.skoruba.local
    depends_on:
        - catalog.api
        - basket.api
        - discount.api
        - ordering.api
        - identityserver.sts.identity
    volumes:
     - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
       identityserverui: null

  shopping.aggregator:
    container_name: shopping.aggregator
    environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - "ApiSettings:CatalogUrl=https://catalog.skoruba.local"
        - "ApiSettings:BasketUrl=https://basket.skoruba.local"
        - "ApiSettings:OrderingUrl=https://ordering.skoruba.local"
        - "IdentityServer:Uri=https://sts.skoruba.local"
        - DockerConfiguration__UpdateCaCertificate=true
        - VIRTUAL_HOST=aggregator.skoruba.local
        
    depends_on:
        - catalog.api
        - basket.api
        - ordering.api
        - identityserver.sts.identity
    volumes:
     - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
     identityserverui: null



  aspnetrunbasics:
    container_name: aspnetrunbasics
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "ApiSettings__GatewayAddress=https://ocelot.skoruba.local"
      - "IdentityServer__Uri=https://sts.skoruba.local"
      - "IdentityServer__RedirectUri=https://web.skoruba.local/signin-oidc"
      - DockerConfiguration__UpdateCaCertificate=true
      - VIRTUAL_HOST=web.skoruba.local
      #- VIRTUAL_PROTO=https
      #- VIRTUAL_PORT=443
      
        
    depends_on:
        - ocelotapigw
        - catalog.api
        - basket.api
        - discount.api
        - ordering.api
        - identityserver.sts.identity
       
    volumes:
     - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
       identityserverui: null
        
   
    

   
      
##create a SAN cert for both host.docker.internal and localhost
#$cert = New-SelfSignedCertificate -DnsName "host.docker.internal", "localhost" -CertStoreLocation cert:\localmachine\my

##export it for docker container to pick up later
#$password = ConvertTo-SecureString -String "1234" -Force -AsPlainText
#Export-PfxCertificate -Cert $cert -FilePath $env:USERPROFILE\.aspnet\https\aspnetappqsdqwe.pfx -Password $password

## trust it on your host machine
#$store = New-Object System.Security.Cryptography.X509Certificates.X509Store "TrustedPublisher","LocalMachine"
#$store.Open("ReadWrite")
#$store.Add($cert)
#$store.Close()

      #docker run -v $PWD/work -it nginx openssl req -out /work/CSR.csr -new -newkey rsa:2048 -nodes -keyout /work/privateKey.key
