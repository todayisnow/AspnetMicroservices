version: '3.4'

services:

  identityserver.admin:
    image: ${DOCKER_REGISTRY-}identityserveradmin
    build:
     context: .
     dockerfile: ../../IdentityServer/IdentityServer.Admin/Dockerfile
  identityserver.admin.api:
    image: ${DOCKER_REGISTRY-}identityserveradminapi
    build:
      context: .
      dockerfile: ../../IdentityServer/IdentityServer.Admin.Api/Dockerfile
  IdentityServer:
    image: ${DOCKER_REGISTRY-}identityserverstsidentity
    build:
      context: .
      dockerfile: ../../IdentityServer/IdentityServer.STS.Identity/Dockerfile



  catalogdb:
    image: mongo
  basketdb:
    image: redis:alpine
  discountdb:
    image: postgres
  sqlServer:
    image: mcr.microsoft.com/mssql/server:2017-latest
  rabbitmq:
    image: rabbitmq:3-management-alpine
  pgadmin:
    image: dpage/pgadmin4

  portainer:
    image: portainer/portainer-ce

  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile

  discount.api:
    image: ${DOCKER_REGISTRY-}discountapi
    build:
      context: .
      dockerfile: Services/Discount/Discount.API/Dockerfile

  discount.grpc:
    image: ${DOCKER_REGISTRY-}discountgrpc
    build:
      context: .
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile

  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile

  ocelotapigw:
    image: ${DOCKER_REGISTRY-}ocelotapigw
    build:
      context: .
      dockerfile: ApiGateways/OcelotApiGw/Dockerfile

  shopping.aggregator:
    image: ${DOCKER_REGISTRY-}shoppingaggregator
    build:
      context: .
      dockerfile: ApiGateways/Shopping.Aggregator/Dockerfile

  aspnetrunbasics:
    image: ${DOCKER_REGISTRY-}aspnetrunbasics
    build:
      context: .
      dockerfile: WebApps/AspnetRunBasics/Dockerfile

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.2

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.9.2
  #webstatus:
  #  image: ${DOCKER_REGISTRY-}webstatus
  #  build:
  #    context: .
  #    dockerfile: WebApps/WebStatus/Dockerfile

volumes:
  mongo_data:
  portainer-data:
  postgres-data:
  pgadmin-data:
  elasticsearch-data:
  dbdata:
    driver: local


  
  







